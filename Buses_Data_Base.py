# -*- coding: utf-8 -*-
"""
Created on Sat Feb  6 14:29:37 2021

@author: Feder-PC
"""
import pickle
import numpy as np
import SimFeder as sf

db={}
#LINEA NORTE
db["N10"] = [(7,32),(7,60),(67/6,55),(13,55),(13,54),(12,54),(7,60),(7,32)]
db["N11"] = [(7,32),(7,60),(7,32)]
db["N12"] = [(7,32),(7,51), (12,51),(12,50),(14,50),(14,54),(7,54),(7,32)]
db["N13"] = [(13,32),(13,50),(14,50),(14,54),(6,54),(6,50),(1,44),(-1,44),(-1,40),(0,40),(0,43),(1,44),(6,50),(7,50),(7,51),(12,51),(12,50),(13,50),(13,32)]
db["N15"] = [(2,32),(2,44),(2,226/5),(6,50),(7,50),(7,53),(8,53),(8,54),(6,54),(2,294/5),(2,60),(1,60),(0,61),(0,60),(1,60),(6,54),(6,50),(1,44),(1,41),(4,41),(4,32),(1,32)]
db["N16"] = [(-2,32),(-2,41),(1,44),(6,50),(7,50),(7,53),(8,53),(8,54),(6,54),(2,294/5),(2,60),(1,60),(0,61),(0,60),(1,60),(6,54),(6,50),(1,44),(-1,44),(-1,32),(-2,32)]
db["N17"] = [(7,32),(7,44),(5,42),(2,42),(2,45),(1,45),(1,50),(7,50),(7,60),(7,49),(1,49),(1,41),(4,41),(7,44),(7,32)]
db["N18"] = [(7,32),(7,60),(7,32)]
#LINEA SUR
db["S10"] = [(31,67),(31,60),(7,60),(7,44),(2,44),(2,45),(1,45),(1,41),(4,41),(7,44),(7,60),(31,60),(31,66)]
db["S18"] = [(31, 72),(31,66),(26,66),(26,67),(24,67),(24,65),(19,60),(14,54),(7,54),(7,44),(3,44),(3,45),(11/6,45),(1,44),(-1,44),(-1,40),(0,40),(0,41),(-1,41),(-1,39),(2,42),(1,42),(1,43),(3,43),(3,44),(7,44),(7,51),(12,51),(14,51),(14,54),(19,60),(24,65),(26,65),(26,66),(31,66),(31,65),(31,68),(31,72)]
db["S19"] = [(31, 72),(26,67),(24,67),(24,65),(19,60),(14,54),(7,54),(7,44),(1,44),(1,41),(2,41),(2,42),(1,42),(1,43),(3,43),(3,44),(7,44),(7,51),(12,51),(12,50),(14,50),(14,54),(19,60),(24,65),(26,65),(26,67),(31,72)]
db["S21"] = [(19,72),(19,60),(14,54),(7,54),(7,44),(5,42),(1,42),(1,43),(2,43),(2,44),(7,44),(7,51),(12,51),(12,50),(14,50),(14,54),(19,60),(19,72)]
#LINEA OESTE
db["O10"] = [(31,44),(7,44),(7,53),(8,53),(8,54),(6,54),(6,50),(11/6,45),(1,45),(1,55),(3,55),(3,57),(1,57),(1,44),(6,50),(7,50),(7,44),(31,44)]
db["O11"] = [(31,44),(19,44),(14,50),(14,54),(7,54),(7,49),(31/6,49),(11/6,45),(1,45),(1,57),(1,44),(6,50),(7,50),(7,51),(12,51),(12,50),(14,50),(19,44),(31,44)]
db["O14"] = [(31,44),(19,44),(14,50),(14,54),(7,54),(7,49),(31/6,49),(11/6,45),(1,45),(1,57),(1,44),(6,50),(7,50),(7,51),(12,51),(12,50),(14,50),(19,44),(31,44)]
db["O15"] = [(31,32),(26,37),(26,39),(24,39),(22,41),(22,42),(5,42),(7,44),(7,53),(8,53),(8,54),(6,54),(6,50),(11/6,45),(1,45),(1,44),(6,50),(7,50),(7,44),(3,40),(3,41),(22,41),(24,39),(24,37),(26,37),(31,32)]
db["O16"] = [(31,32),(29,32),(27,32),(13,32),(13,44),(7,44),(7,53),(8,53),(8,54),(6,54),(6,50),(11/6,45),(1,45),(1,44),(6,50),(7,50),(7,44),(13,44),(13,32),(27,32),(31,32)]
db["O17"] = [(31,32),(26,37),(26,39),(24,39),(22,41),(22,42),(5,42),(7,44),(7,53),(8,53),(8,54),(6,54),(6,50),(11/6,45),(1,45),(1,44),(6,50),(7,50),(7,44),(3,40),(3,41),(22,41),(24,39),(24,37),(26,37),(31,32)]
db["O18"] = [(31,32),(26,37),(26,39),(24,39),(19,44),(14,50),(14,54),(13,54),(13,64),(14,64),(14,68),(14,64),(13,64),(13,54),(12,54),(12,50),(14,50),(19,44),(24,39),(24,37),(26,37),(31,32)]
db["O19"] = [(31,32),(26,37),(26,39),(24,39),(19,44),(14,50),(14,54),(13,54),(13,64),(14,64),(14,69),(2,69),(2,71),(1,71),(1,68),(14,68),(14,64),(13,64),(13,54),(12,54),(12,50),(14,50),(19,44),(24,39),(24,37),(26,37),(31,32)]
db["O22"] = [(19,32),(13,32),(13,44),(7,44),(7,51),(12,51),(12,50),(14,50),(14,54),(7,54),(7,44),(13,44),(13,32),(19,32)]
db["O23"] = [(31,32),(26,37),(26,39),(24,39),(19,44),(19,51),(14,51),(14,54),(14,54),(7,54),(7,60),(7,49),(31/6,49),(1,44),(6,50),(7,50),(7,60),(7,51),(12,51),(12,50),(14,50),(14,51),(19,51),(19,44),(24,39),(24,37),(26,37),(31,32)]
db["O24"] = [(20,32),(13,32),(13,44),(7,44),(5,42),(2,42),(2,44),(1,44),(6,50),(7,50),(7,60),(7,49),(31/6,49),(1,44),(1,41),(4,41),(7,44),(13,44),(13,32),(19,32)]
db["O26"] = [(31,39),(31,38),(26,38),(26,39),(24,39),(24,38),(3,38),(3,40),(7,44),(7,53),(8,53),(8,54),(6,54),(6,50),(11/6,45),(1,45),(1,44),(6,50),(7,50),(7,44),(5,42),(4,42),(4,38),(24,38),(24,37),(26,37),(26,38),(31,38)]
db["O27"] = [(31,44),(19,44),(14,50),(14,54),(7,54),(7,49),(31/6,49),(1,44),(6,50),(7,50),(7,51),(12,51),(12,50),(14,50),(19,44),(31,44)]


def enriquecer(db):
    """Completa con puntos intermedios el grafo sin modificarlo.
    Esta funci√≥n es necesaria para que el solapamiento este bien calculado."""

    super_graph = []

    for a, b in zip(db[:-1], db[1:]):
        super_graph += list(np.linspace(a, b, 2*int(np.linalg.norm(a-b)) + 1))

    return super_graph


def data(name='db', full = True):
    data = {}
    for linea, ruta in db.items():
        if full: data[linea] = enriquecer([np.array(nodo) for nodo in ruta])
        else: data[linea] = [np.array(nodo) for nodo in ruta]
    pickle.dump(data, open(name + ".p", "wb"))
    print('Data saved.')

data('minimal_db', False)

data('db', True)
dataBase = pickle.load(open("db.p", "rb"))

def solapamiento_dic(db=dataBase):
    S = {}
    for linea, ruta in db.items():
        print(linea + ' Calculando Solapamiento.')
        S[linea] = np.array([sf.solapamiento_local(0.5*(a+b)) for a, b in
                          zip(ruta[:-1], ruta[1:])])
    pickle.dump(S, open("solapamiento.p", "wb"))
    return 'Data saved.'


# solapamiento_dic()
